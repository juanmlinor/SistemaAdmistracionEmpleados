@implements IDisposable

@if(allState.ShowHealth)
{
    <div class="continer mt-5">
        <div class="row">
            <div class ="col-lg-12">
                <div class="card border-warning shadow-lg">
                    <div class="card-header"><h4 class="float-start">Health Information</h4></div>
                    <div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll;">
                        <div class="card-body">
                             @{
                            var Tool = (new List<string>() { "Search", "ExcelExport", "PdfExport", "Print" });
                        }
                       <SfGrid DataSource="@Doctors" AllowPaging="true" AllowSorting="true" Toolbar=@Tool AllowExcelExport="true" @ref="DefaultGrid" AllowPdfExport="true">
                            <GridPageSettings PageSize="5"></GridPageSettings>
                            <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="Doctor"></GridEvents>
                            <GridColumns>
                                <GridColumn Field=@nameof(Doctors.EmployeeId) HeaderText="ID"></GridColumn>
                                <GridColumn Field=@nameof(Doctors.MedicalDiagnose) HeaderText="MedicalDiagnose"></GridColumn>
                                <GridColumn Field=@nameof(Doctors.MedicalRecommendation) HeaderText="MedicalRecommendation"></GridColumn>
                                <GridColumn Field=@nameof(Doctors.Date) HeaderText="Date"></GridColumn>
                                  <GridColumn HeaderText="Action">                         
                                    <Template>
                                        @{
                                            var employee = (context as Doctor);
                                            <div>
                                                <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="()=>EditClicked(employee!)"></i>
                                                <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="()=>DeleteClicked(employee!)"></i>
                                            </div>
                                        }
                                    </Template>
                                </GridColumn>
                            </GridColumns>
                        </SfGrid>

                    </div>
                   <div class="card-footer"></div>
                </div>
            </div>
            </div>
        </div>
    </div>
}

 <DoctorDialog @ref="doctorDialog"
                     HandleSaveOperationEvent="HandleSaveOperationEvent" 
                     Doctor="Doctor"
                     GeneralDoctors="GeneralDoctors" />
<style>
    #cursorStyle{
        cursor:pointer;
    }
</style>
<DoctorDialog @ref="doctorDialog"
            Doctor="Doctor"
            HandleSaveOperationEvent="HandleSaveOperationEvent" 
               />

@code {
     private SfGrid<Doctor>? DefaultGrid;
    //public string Title { get; set; } = "Add";
    DoctorDialog? doctorDialog;
    Doctor Doctor = new();
    public List<Doctor> Doctors { get; set; } = new();    
   // public List<GeneralDoctor> GeneralDoctors { get; set; } = new();

    protected async override Task OnInitializedAsync(){
        await GetHealth();
        allState.Action += StateHasChanged;
    }

    private async Task GetHealth(){
        Doctors = await doctorService.GetAll(Constants.DoctorBaseUrl);
    }

    void AddButtonClicked()
    {
        //DoctorDialog?.ChangeTitle("Add");
        Doctor = new();
        OpenDialog();
    }
    void OpenDialog()
    {
        doctorDialog?.OpenDialog();
    }

    private async Task DeleteClicked(Doctor dep)
    {    
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete{dep.Name}?", "Confirm Delete");
        if(!confirm) return;
        var response = await doctorService.DeleteById(dep.EmployeeId, Constants.DoctorBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (result) await GetHealth();
    }

    private async Task<bool> DisplayMessage(bool flag,string message){
        if(flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else{
            await dialogService.AlertAsync(message, "Alert!");
            return true;
        }
    }

    private async Task HandleSaveOperationEvent(Doctor Doctor)
    {
         
            var result = await doctorService.Update(Doctor, Constants.DoctorBaseUrl);
           var successCheck = await DisplayMessage(result.Flag, result.Message);
                
        if(successCheck)
        {
            Doctor = new();
            await GetHealth();
        }
    }

    private void EditClicked(Doctor dep)
    {
        Doctor = dep;
        OpenDialog();
    }

      //Excel export PDF Expert
    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Excel Expert") await this.DefaultGrid!.ExcelExport()!;

        if (args.Item.Text == "PDF Export") await this.DefaultGrid!.PdfExport()!;
    }


    public void Dispose(){
        allState.Action -= StateHasChanged;
    }
}
