@if (allState.ShowOvertime)
{
    <div class="continer mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card border-danger shadow-lg">
                    <div class="card-header">
                        <h4 class="float-start">Manage Employees Overtime </h4>
                        <div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll;">
                            <div class="card-body">
                                @{
                                    var Tool = (new List<string>() { "Search", "ExcelExport", "PdfExport", "Print" });
                                }
                               
                                <SfGrid DataSource="@Overtimes" AllowPaging="true" AllowSorting="true" Toolbar=@Tool 
                                        AllowExcelExport="true" @ref="DefaultGrid" AllowPdfExport="true">
                                    <GridPageSettings PageSize="5"></GridPageSettings>
                                    <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="Overtime"></GridEvents>
                                    <GridColumns>
                                        <GridColumn Field=@nameof(Vacation.EmployeeId) HeaderText="ID"></GridColumn>
                                        <GridColumn HeaderText="Type">
                                            <Template>
                                                @{
                                                    var item = (context as Overtime);
                                                    <div>
                                                     @item!.OvertimeType!.Name
                                                    </div>
                                                }
                                            </Template>
                                         </GridColumn>
                                        <GridColumn Field=@nameof(Overtime.StartDate) HeaderText="Start Date"></GridColumn>
                                        <GridColumn Field=@nameof(Overtime.EndDate) HeaderText="End Date"></GridColumn>
                                        <GridColumn Field=@nameof(Overtime.NumberOfDays) HeaderText="Number of days"></GridColumn>
                                        <GridColumn HeaderText="Action">
                                            <Template>
                                                    @{
                                                        var employee = (context as Overtime);
                                                        <div>
                                                        <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="()=>EditClicked(employee!)"></i>
                                                        <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="()=>DeleteClicked(employee!)"></i>
                                                        </div>
                                                    }
                                            </Template>
                                        </GridColumn>
                                    </GridColumns>
                                </SfGrid>
                            </div>
                    </div>
                     
              </div>
        </div>
    </div>
   </div>
  </div> 
}

<style>
    #cursorStyle {
        cursor: pointer;
    }
</style>

<OvertimeDialog @ref="overtimeDialog" ItemModel="ItemModel" 
    OvertimeTypes="OvertimeTypes" HandleSaveOperationEvent="HandleSaveOperationEvent" />


@code {
    private SfGrid<Overtime>? DefaultGrid;
    OvertimeDialog? overtimeDialog;
    Overtime ItemModel = new();
    public List<Overtime> Overttimes { get; set; } =new();
    public List<OvertimeType> OverttimeTypes { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetTypes();
        await GetOvertime();
        allState.Action += StateHasChanged;
    }

    private async Task GetTypes() => OvertimeTypes = await overtimeTypeService.GetAll(Constants.OvertimeTypeBaseUrl);

    private async Task GetOvertime() => Overtime = await overtimeService.GetAll(Constants.OvertimeBaseUrl);
    
    public void OpenDialog() => overtimeTypeDialog?.OpenDialog();

    public async Task HandleSaveOperationEvent(Overtime item)
    {
        var result = await overtimeService.Update(item, Constants.OvertimeBaseUrl);
        bool successCheck = await DisplayMessage(result.Flag, result.Message);
        if (successCheck)
        {
            ItemModel = new();
            await GetOvertime();
        } 
    }

    //Edit clicked
    void EditClicked(Overtime item)
    {
        ItemModel = item;
        OpenDialog();
    }

    //Delete clicked
    private async Task DeleteClicked(Overtime item)
    {
        contextMenu.CloseContextMenu();
        bool confirm = await dialogService.ConfirmAsync($" Are you sure your wanna delete this?","Confirm Delete");
        if (!confirm) return;

        var response = await overtimeService.DeleteById(item.EmployeeId, Constants.OvertimeBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (result)
        {
            await GetOvertime();
        }
    }

private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    //Excel export PDF Expert
    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Excel Expert") await this.DefaultGrid!.ExcelExport()!;

        if (args.Item.Text == "PDF Export") await this.DefaultGrid!.PdfExport()!;
    }

    public void Dispose() => allState.Action -= StateHasChanged;

    @* private async Task LoadDefaults()
    {
        DefaultCountries = await countryService.GetAll(Constants.CountrytBaseUrl);
        DefaultCities = await cityService.GetAll(Constants.CitytBaseUrl);
        DefaultTowns = await townService.GetAll(Constants.TownBaseUrl);

        DefaultGeneralDepartments = await generalDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl);
        DefaultDepartments = await departmentsService.GetAll(Constants.DepartmentBaseUrl);
        DefaultBranches = await branchService.GetAll(Constants.BranchBaseUrl);
    } *@



    @* //General department select
    private void HandleGeneralDepartmentSelectedEvent(int generalDepartmentId) => SelectedDepartments = DefaultDepartments.Where(t => t.GeneralDepartmentId == generalDepartmentId).ToList();

    //department select
    private void HandleDepartmentSelectedEvent(int departmentId) => SelectedBranches = DefaultBranches.Where(t => t.DepartmentId == departmentId).ToList();

    //Notify parent when Add or update employee form closes
    private async Task NotifyParentFormCloseClicked()
    {
        ShowMainPage = true;
        ShowAddOrUpdatePage = false;
        await LoadEmployees();

    } *@

    @* //Load employee
    private async Task LoadEmployee() => Employees = await employeeService.GetAll(Constants.EmployeeBaseUrl);

    //Save employee
    private async Task HandleSaveEmployeesClickedEvent(Employee employee)
    {
        bool successCheck = false;
        if (Employee.Id > 0)
        {
            var result = await employeeService.Update(employee, Constants.EmployeeBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await employeeService.Insert(employee, Constants.EmployeeBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        if (successCheck) addOrUpdateEmployee!.ClearContent();
    } *@


    @* public bool ShowMainPage { get; set; } = true;
    public bool ShowAddOrUpdatePage { get; set; } = false;

    void ShowAddOrUpdateEmployeeButtonClicked()
    {
        ShowMainPage = false;
        ShowAddOrUpdatePage = true;
    } *@

    @* //Context menu
    //Show Menu Pop Up
    ContextMenu? contextMenu;

    public Employee SelectedEmployee { get; set; } = new();
    void ShowMenuPopUp(Employee employee)
    {
        SelectedEmployee = employee;
        contextMenu!.OpenContextMenu();
    } *@

    //Display message using dialog service
    
    
}
