@implements IDisposable
@if (allState.ShowSanction)
{
    <div class="container-fluid mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card border-danger shadow-lg border-info">
                    <div class="card-header">
                        <h4 class="float-start">Manage Employees Overtime </h4>
                     </div>
                            <div class="card-body">
                                @{
                                    var Tool = (new List<string>() { "Search", "ExcelExport", "PdfExport", "Print" });
                                }
                               
                                <SfGrid DataSource="@Sanctions" AllowPaging="true" AllowSorting="true" Toolbar=@Tool AllowExcelExport="true" @ref="DefaultGrid" AllowPdfExport="true">
                                    <GridPageSettings PageSize="5"></GridPageSettings>
                                    <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="Overtime"></GridEvents>
                                    <GridColumns>
                                        <GridColumn Field=@nameof(Sanction.EmployeeId) HeaderText="ID"></GridColumn>
                                        <GridColumn HeaderText="Type">
                                            <Template>
                                                @{
                                                    var sanction = (context as Sanction);
                                                    <div>
                                                     @sanction!.SanctionType!.Name
                                                    </div>
                                                }
                                            </Template>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(Sanction.Date) HeaderText="Occuring Date"></GridColumn>
                                    <GridColumn Field=@nameof(Sanction.Punishment) HeaderText="Punishment"></GridColumn>
                                    <GridColumn Field=@nameof(Sanction.PunishmentDate) HeaderText="Punishment Date"></GridColumn>
                                    <GridColumn HeaderText="Action">
                                        <Template>
                                                @{
                                                    var employee = (context as Sanction);
                                                    <div>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="()=>EditClicked(employee!)"></i>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="()=>DeleteClicked(employee!)"></i>
                                                    </div>
                                                }
                                        </Template>
                                    </GridColumn>
                                    </GridColumns>
                                </SfGrid>                         
                    </div>
                    <div class="card-footer"></div>
            </div>
        </div>
    </div>
  </div>
}

<style>
    #cursorStyle {
        cursor: pointer;
    }
</style>

<SanctionDialog @ref="sanctionDialog" ItemModel="ItemModel" 
    SanctionTypes="SanctionTypes" HandleSaveOperationEvent="HandleSaveOperationEvent" />


@code {
    private SfGrid<Sanction>? DefaultGrid;
    SanctionDialog? sanctionDialog;

    Overtime ItemModel = new();
    public List<Sanction> Sanctions { get; set; } =new();
    public List<SanctionType> SanctionTypes { get; set; } = new();


    protected async override Task OnInitializedAsync()
    {
        await GetTypes();
        await GetSanctions();
        allState.Action += StateHasChanged;
    }

    private async Task GetTypes() => 
            SanctionTypes = sanctionTypeService.GetAll(Constants.SanctionTypeBaseUrl);

    private async Task GetSanctions() => 
            Sanctions = sanctionService.GetAll(Constants.SanctionBaseUrl);
    public void OpenDialog() => sanctionDialog?.OpenDialog();

    public async Task HandleSaveOperationEvent(Sanction item)
    {
        var result = await sanctionService.Update(item, Constants.SanctionBaseUrl);
        bool successCheck = await DisplayMessage(result.Flag, result.Message);
        if (successCheck)
        {
            ItemModel = new();
            await GetSanctions();
        } 
    }

    //Edit clicked
    void EditClicked(Sanction item)
    {
        itemModel = item;
        OpenDialog();
    }

    //Delete clicked
    private async Task DeleteClicked(Sanction item)
    {
        
        bool confirm = await dialogService.ConfirmAsync($" Are you sure your wanna delete this?","Confirm Delete");
        if (!confirm) return;

        var response = await sanctionService.DeleteById(item.EmployeeId, Constants.OvertimeBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (result)
        {
            await GetSanctions();
        }
    }

    //Display message using dialog service
    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    //Excel export PDF Expert
    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Excel Expert") await this.DefaultGrid!.ExcelExport()!;

        if (args.Item.Text == "PDF Export") await this.DefaultGrid!.PdfExport()!;
    }

    public void Dispose() => allState.Action -= StateHasChanged;

}
