@implements IDisposable
@if (allState.ShowVacation)
{
    <div class="container-fluid mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card border-danger shadow-lg border-info">
                    <div class="card-header">
                        <h4 class="float-start">Manage Employees Overtime </h4>
                    </div>
                    <div class="card-body">
                        @{
                            var Tool = (new List<string>() { "Search", "ExcelExport", "PdfExport", "Print" });
                        }

                        <SfGrid DataSource="@Vacations" AllowPaging="true" AllowSorting="true" Toolbar=@Tool AllowExcelExport="true" @ref="DefaultGrid" AllowPdfExport="true">
                            <GridPageSettings PageSize="5"></GridPageSettings>
                            <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="Vacation"></GridEvents>
                            <GridColumns>
                                <GridColumn Field=@nameof(Vacation.EmployeeId) HeaderText="ID"></GridColumn>
                                <GridColumn HeaderText="Type">
                                    <Template>
                                        @{
                                            var item = (context as Vacation);
                                            <div>
                                                @item!.VacationType!.Name
                                            </div>
                                        }
                                    </Template>
                                </GridColumn>
                                <GridColumn Field=@nameof(Vacation.StartDate) HeaderText="Start Date"></GridColumn>
                                <GridColumn Field=@nameof(Vacation.EndDate) HeaderText="End Date"></GridColumn>
                                <GridColumn Field=@nameof(Vacation.NumberOfDays) HeaderText="Number of Days"></GridColumn>
                                <GridColumn HeaderText="Action">
                                    <Template>
                                        @{
                                            var employee = (context as Vacation);
                                            <div>
                                                <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="()=>EditClicked(employee!)"></i>
                                                <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="()=>DeleteClicked(employee!)"></i>
                                            </div>
                                        }
                                    </Template>
                                </GridColumn>
                            </GridColumns>
                        </SfGrid>

                    </div>
                    <div class="card-footer"></div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    #cursorStyle {
        cursor: pointer;
    }
</style>

<VacationDialog @ref="vacationDialog" ItemModel="ItemModel"
                VacationTypes="VacationTypes" 
                HandleSaveOperationEvent="HandleSaveOperationEvent" />


@code {
    private SfGrid<Vacation>? DefaultGrid;
    VacationDialog? vacationDialog;

    Overtime ItemModel = new();
    public List<Vacation> Vacations { get; set; } = new();
    public List<VacationType> VacationTypes { get; set; } = new();


    protected async override Task OnInitializedAsync()
    {
        await GetTypes();
        await GetVacations();
        allState.Action += StateHasChanged;
    }

    private async Task GetTypes() => VacationTypes = vacationTypeService.GetAll(Constants.VacationTypeBaseUrl);

    private async Task GetVacations() => Vacations = vacationService.GetAll(Constants.VacationBaseUrl);

    public void OpenDialog() => vacationDialog?.OpenDialog();

    public async Task HandleSaveOperationEvent(Vacation item)
    {
        var result = await vacationService.Update(item, Constants.VacationBaseUrl);
        bool successCheck = await DisplayMessage(result.Flag, result.Message);
        if (successCheck)
        {
            ItemModel = new();
            await GetVacations();
        }
    }

    //Edit clicked
    void EditClicked(Vacation item)
    {
        itemModel = item;
        OpenDialog();
    }

 //Delete clicked
    private async Task DeleteClicked(Sanction item)
    {
        
        bool confirm = await dialogService.ConfirmAsync($" Are you sure your wanna delete this?","Confirm Delete");
        if (!confirm) return;

        var response = await sanctionService.DeleteById(item.EmployeeId, Constants.OvertimeBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (result)
        {
            await GetVacations();
        }
    }

    //Display message using dialog service
    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    //Excel export PDF Expert
    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Excel Expert") await this.DefaultGrid!.ExcelExport()!;

        if (args.Item.Text == "PDF Export") await this.DefaultGrid!.PdfExport()!;
    }

    public void Dispose() => allState.Action -= StateHasChanged;

}
